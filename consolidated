---

# The Basics: What is a Pointer?

- A pointer holds the memory address of a value, not the value itself.
- `&` gets the address of a variable (the "location of...").
- `*` gets the value at a memory address (the "value of...").
- Example:
  ```go
  x := 5
  p := &x // p is a pointer to x
  fmt.Println(*p) // prints 5
  fmt.Println(p) // prints the memory address
  ```
- Why use pointers?
  - Avoid copying large structs
  - Enable functions to modify values
  - Signal errors with `nil`
- Notes:
  - On 64-bit systems, a pointer is always 8 bytes in size, regardless of the type it points to.
  - Some Go types (maps, slices, channels, interfaces, and functions) already behave like pointers:
    - When you pass these types to functions, the underlying data is shared, not copied.
    - You do not need to use explicit pointers with these types to share or modify their contents.
  - In Go, an uninitialized pointer has the zero value `nil`.
  - Always check if a pointer is `nil` before dereferencing to avoid panics.
    - Example:
        ```go
        var p *int // p is nil
        if p is nil {
            fmt.Println("Pointer is nil")
        }
        ```
---

## Go-ing Deeper

- **Zero Values and nil**
  - In Go, an uninitialized pointer has the zero value `nil`.
  - Always check if a pointer is `nil` before dereferencing to avoid panics.
  - Example:
    ```go
    var p *int // p is nil
    if p is nil {
        fmt.Println("Pointer is nil")
    }
    ```

- **Pointer Receivers vs Value Receivers**
  - Methods can have pointer or value receivers.
  - Use a pointer receiver if the method needs to modify the receiver or to avoid copying large structs.
  - Value receivers are fine for small, immutable types.
  - Go automatically takes the address or dereferences as needed when calling methods.

---